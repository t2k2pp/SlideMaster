// =================================================================
// Fooocus Provider - ローカル画像生成特化プロバイダー
// 2025年対応 (Stable Diffusion XL, SDXL Turbo, Flux対応)
// =================================================================

import { 
  AIProvider,
  AIProviderType,
  AIProviderConfig,
  TextGenerationRequest,
  ImageGenerationRequest,
  VideoAnalysisRequest,
  AIProviderError,
  AIProviderConnectionError,
  AIProviderConfigError
} from './aiProviderInterface';

import { getAvailableModels } from './modelRegistry';

// Fooocus API インターフェース
interface FooucusClient {
  generateImage: (params: any) => Promise<any>;
  getJobStatus: (jobId: string) => Promise<any>;
  getModels: () => Promise<any>;
  getServerInfo: () => Promise<any>;
}

interface FooucusJob {
  job_id: string;
  job_type: string;
  job_stage: string;
  job_progress: number;
  job_status: string;
  job_step_preview?: string;
  job_result?: Array<{
    url: string;
    seed: number;
  }>;
}

export class FooucusProvider implements AIProvider {
  name: AIProviderType = 'fooocus';
  private client: FooucusClient;
  private config: AIProviderConfig;
  private baseURL: string;

  constructor(config: AIProviderConfig) {
    this.config = config;
    this.baseURL = config.endpoint || 'http://localhost:7865';

    try {
      this.client = this.createFooucusClient(config);
    } catch (error) {
      throw new AIProviderConnectionError(
        `Failed to initialize Fooocus client: ${error.message}`,
        'fooocus',
        error as Error
      );
    }
  }

  async generateText(request: TextGenerationRequest): Promise<string> {
    // Fooucusは画像生成専用
    throw new AIProviderError(
      'Fooocus is specialized for image generation only. Please use another provider for text generation.',
      'fooocus',
      'UNSUPPORTED_OPERATION'
    );
  }

  async generateImage(request: ImageGenerationRequest): Promise<string> {
    try {
      // Fooocus APIで画像生成ジョブを開始
      const jobResponse = await this.client.generateImage({
        prompt: request.prompt,
        negative_prompt: request.negativePrompt || '',
        style_selections: request.style ? [request.style] : ['Fooocus V2'],
        performance_selection: request.quality === 'hd' ? 'Quality' : 'Speed',
        aspect_ratios_selection: this.convertSizeToAspectRatio(request.size),
        image_number: request.n || 1,
        image_seed: request.seed || -1,
        sharpness: 2.0,
        guidance_scale: 4.0,
        base_model_name: request.model || 'juggernautXL_v8Rundiffusion.safetensors',
        refiner_model_name: 'None',
        loras: [],
        advanced_params: {
          disable_seed_increment: false,
          mixing_image_prompt_and_vary_upscale: false,
          mixing_image_prompt_and_inpaint: false,
          debugging_cn_preprocessor: false,
          skipping_cn_preprocessor: false,
          canny_low_threshold: 64,
          canny_high_threshold: 128,
          refiner_swap_method: 'joint'
        }
      });

      if (!jobResponse.job_id) {
        throw new AIProviderError(
          'Failed to start image generation job in Fooocus',
          'fooocus'
        );
      }

      // ジョブ完了まで待機
      const result = await this.waitForJobCompletion(jobResponse.job_id);
      
      if (!result.job_result || result.job_result.length === 0) {
        throw new AIProviderError(
          'No image generated by Fooocus',
          'fooocus'
        );
      }

      // 最初の画像をBase64として取得
      const imageUrl = result.job_result[0].url;
      const imageBase64 = await this.fetchImageAsBase64(imageUrl);
      
      return imageBase64;
    } catch (error) {
      throw this.handleFooucusError(error, 'Image Generation');
    }
  }

  async analyzeVideo(request: VideoAnalysisRequest): Promise<string> {
    // Fooucusは画像生成専用
    throw new AIProviderError(
      'Fooocus does not support video analysis. Please use another provider for video analysis.',
      'fooocus',
      'UNSUPPORTED_OPERATION'
    );
  }

  async validateConfig(config: AIProviderConfig): Promise<boolean> {
    try {
      const endpoint = config.endpoint || 'http://localhost:7865';
      
      // Fooucusサーバーの生存確認
      const response = await fetch(`${endpoint}/system_status`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async getAvailableModels(): Promise<{ [key: string]: string[] }> {
    try {
      const modelsResponse = await this.client.getModels();
      const availableModels = modelsResponse.model_filenames || [];

      return {
        textGeneration: [], // Fooucusはテキスト生成未対応
        imageGeneration: availableModels,
        videoAnalysis: [], // Fooucusは動画分析未対応
      };
    } catch (error) {
      // フォールバック: レジストリからの固定リスト
      const imageModels = getAvailableModels('fooocus', 'image').map(m => m.id);

      return {
        textGeneration: [],
        imageGeneration: imageModels,
        videoAnalysis: [],
      };
    }
  }

  async estimateCost(request: any): Promise<number> {
    // ローカル実行のため実質無料
    return 0.0;
  }

  // Fooocus クライアント作成
  private createFooucusClient(config: AIProviderConfig): FooucusClient {
    const baseURL = config.endpoint || 'http://localhost:7865';
    
    return {
      generateImage: async (params: any) => {
        const response = await fetch(`${baseURL}/v1/generation/text-to-image`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(params)
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(`Fooocus API error: ${response.status} ${response.statusText} - ${errorData.detail || 'Unknown error'}`);
        }

        return await response.json();
      },

      getJobStatus: async (jobId: string) => {
        const response = await fetch(`${baseURL}/v1/generation/query-job`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ job_id: jobId, require_step_preview: false })
        });

        if (!response.ok) {
          throw new Error(`Fooocus job status error: ${response.status} ${response.statusText}`);
        }

        return await response.json();
      },

      getModels: async () => {
        const response = await fetch(`${baseURL}/v1/engines/all-models`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`Fooocus models error: ${response.status} ${response.statusText}`);
        }

        return await response.json();
      },

      getServerInfo: async () => {
        const response = await fetch(`${baseURL}/system_status`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`Fooocus server info error: ${response.status} ${response.statusText}`);
        }

        return await response.json();
      }
    };
  }

  // ジョブ完了まで待機
  private async waitForJobCompletion(jobId: string, maxWaitTime: number = 120000): Promise<FooucusJob> {
    const startTime = Date.now();
    const pollInterval = 2000; // 2秒間隔でポーリング

    while (Date.now() - startTime < maxWaitTime) {
      try {
        const status = await this.client.getJobStatus(jobId);
        
        if (status.job_status === 'SUCCESSFUL') {
          return status;
        }
        
        if (status.job_status === 'FAILED') {
          throw new AIProviderError(
            'Image generation failed in Fooocus',
            'fooocus'
          );
        }

        // 進行中の場合は待機
        await new Promise(resolve => setTimeout(resolve, pollInterval));
      } catch (error) {
        if (error instanceof AIProviderError) {
          throw error;
        }
        throw new AIProviderError(
          `Failed to check job status: ${error.message}`,
          'fooocus'
        );
      }
    }

    throw new AIProviderError(
      `Image generation timeout in Fooocus (${maxWaitTime}ms)`,
      'fooocus'
    );
  }

  // 画像をBase64として取得
  private async fetchImageAsBase64(imageUrl: string): Promise<string> {
    try {
      const fullUrl = imageUrl.startsWith('http') ? imageUrl : `${this.baseURL}${imageUrl}`;
      const response = await fetch(fullUrl);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${response.status}`);
      }

      const arrayBuffer = await response.arrayBuffer();
      const base64 = Buffer.from(arrayBuffer).toString('base64');
      
      // MIMEタイプを推測（通常はPNGまたはJPEG）
      const mimeType = response.headers.get('content-type') || 'image/png';
      
      return `data:${mimeType};base64,${base64}`;
    } catch (error) {
      throw new AIProviderError(
        `Failed to convert image to base64: ${error.message}`,
        'fooocus'
      );
    }
  }

  // サイズをアスペクト比に変換
  private convertSizeToAspectRatio(size?: string): string {
    const sizeMap: { [key: string]: string } = {
      '256x256': '1:1',
      '512x512': '1:1',
      '1024x1024': '1:1',
      '512x768': '2:3',
      '768x512': '3:2',
      '1024x1536': '2:3',
      '1536x1024': '3:2'
    };

    return sizeMap[size || '1024x1024'] || '1:1';
  }

  // Fooocus固有エラーハンドリング
  private handleFooucusError(error: unknown, context: string): AIProviderError {
    if (error instanceof AIProviderError) {
      return error;
    }

    if (error instanceof Error) {
      const message = error.message.toLowerCase();
      
      if (message.includes('connection') || message.includes('econnrefused')) {
        return new AIProviderConnectionError(
          'Cannot connect to Fooocus. Please ensure Fooocus is running on the specified port.',
          'fooocus',
          error
        );
      }
      
      if (message.includes('timeout')) {
        return new AIProviderError(
          'Fooocus request timeout. Image generation may take longer than expected.',
          'fooocus',
          'TIMEOUT_ERROR',
          error
        );
      }
      
      if (message.includes('cuda') || message.includes('gpu')) {
        return new AIProviderError(
          'Fooocus GPU/CUDA error. Please check your graphics card setup.',
          'fooocus',
          'GPU_ERROR',
          error
        );
      }
      
      if (message.includes('model')) {
        return new AIProviderConfigError(
          'Fooocus model error. Please check if the specified model is available.',
          'fooocus',
          error
        );
      }
      
      return new AIProviderError(
        `Fooocus ${context} error: ${error.message}`,
        'fooocus',
        'UNKNOWN_ERROR',
        error
      );
    }

    return new AIProviderError(
      `Fooocus ${context}: Unknown error occurred`,
      'fooocus',
      'UNKNOWN_ERROR'
    );
  }

  // Fooocus特有のメソッド: サーバー情報取得
  async getServerInfo(): Promise<{
    queue_size?: number;
    processing_queue?: number;
    finished_count?: number;
    last_model?: string;
  }> {
    try {
      const info = await this.client.getServerInfo();
      return {
        queue_size: info.queue_size,
        processing_queue: info.processing_queue,
        finished_count: info.finished_count,
        last_model: info.last_model
      };
    } catch (error) {
      console.warn('Failed to get Fooocus server info:', error);
      return {};
    }
  }

  // Fooocus特有のメソッド: スタイル一覧取得
  async getAvailableStyles(): Promise<string[]> {
    try {
      // Fooucusの標準スタイル
      return [
        'Fooocus V2',
        'Fooocus Enhance',
        'Fooocus Sharp',
        'Fooocus Masterpiece',
        'SAI 3D Model',
        'SAI Analog Film',
        'SAI Anime',
        'SAI Cinematic',
        'SAI Comic Book',
        'SAI Craft Clay',
        'SAI Digital Art',
        'SAI Enhance',
        'SAI Fantasy Art',
        'SAI Isometric',
        'SAI Line Art',
        'SAI Lowpoly',
        'SAI Neonpunk',
        'SAI Origami',
        'SAI Photographic',
        'SAI Pixel Art',
        'SAI Texture'
      ];
    } catch (error) {
      console.warn('Failed to get Fooocus styles:', error);
      return ['Fooocus V2'];
    }
  }
}