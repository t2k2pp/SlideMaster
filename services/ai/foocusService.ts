// =================================================================
// Fooocus Service - ローカル画像生成（Stable Diffusion）サービス
// Fooocus/Stable Diffusionでの画像生成対応
// =================================================================

import { 
  FoocusConfig, 
  FoocusImageRequest, 
  validateFoocusConfig, 
  LocalLLMConfigError 
} from './localLLMConfig';

export interface FoocusGenerationResponse {
  images: string[]; // Base64エンコードされた画像データ
  parameters: {
    prompt: string;
    negative_prompt?: string;
    width: number;
    height: number;
    steps: number;
    guidance_scale: number;
    model: string;
  };
  info: string;
}

export interface FoocusModelInfo {
  id: string;
  name: string;
  type: string;
  size?: string;
}

export interface FoocusStyleInfo {
  name: string;
  description?: string;
  preview?: string;
}

export class FoocusService {
  private config: FoocusConfig;
  private baseUrl: string;

  constructor(config: FoocusConfig) {
    const validationErrors = validateFoocusConfig(config);
    if (validationErrors.length > 0) {
      throw new LocalLLMConfigError(
        `Fooocus configuration error: ${validationErrors.join(', ')}`,
        'fooocus'
      );
    }

    this.config = config;
    this.baseUrl = config.endpoint.replace(/\/$/, ''); // 末尾のスラッシュを除去
  }

  /**
   * 画像生成
   */
  async generateImage(request: FoocusImageRequest): Promise<string> {
    try {
      const response = await this.makeRequest('/sdapi/v1/txt2img', {
        prompt: request.prompt,
        negative_prompt: request.negativePrompt || 'low quality, blurry, distorted',
        width: request.width || 1024,
        height: request.height || 1024,
        steps: request.steps || 30,
        cfg_scale: request.guidance_scale || 7.0,
        sampler_index: 'DPM++ 2M Karras',
        batch_size: 1,
        n_iter: 1,
        ...(request.model && { override_settings: { sd_model_checkpoint: request.model } })
      });

      const data = await response.json() as FoocusGenerationResponse;
      
      if (!data.images || data.images.length === 0) {
        throw new LocalLLMConfigError('No image generated by Fooocus', 'fooocus');
      }

      // Base64データをData URLに変換
      const base64Image = data.images[0];
      const dataUrl = base64Image.startsWith('data:') ? base64Image : `data:image/png;base64,${base64Image}`;
      
      return dataUrl;
    } catch (error) {
      if (error instanceof LocalLLMConfigError) {
        throw error;
      }
      throw new LocalLLMConfigError(
        `Fooocus API error: ${error instanceof Error ? error.message : 'Unknown error'}`,
        'fooocus'
      );
    }
  }

  /**
   * スライド画像生成（SlideMaster用）
   */
  async generateSlideImage(prompt: string, options?: {
    size?: 'square' | 'landscape' | 'portrait';
    quality?: 'low' | 'medium' | 'high' | 'extreme';
    style?: string;
    slideTitle?: string;
    slideContent?: string;
    imageType?: 'background' | 'illustration' | 'icon' | 'diagram';
  }): Promise<string> {
    // サイズを数値に変換
    const sizeMap = {
      square: { width: 1024, height: 1024 },
      landscape: { width: 1344, height: 768 },
      portrait: { width: 768, height: 1344 }
    };
    const size = sizeMap[options?.size || 'landscape'];

    // 品質をステップ数に変換
    const qualityMap = {
      low: 15,
      medium: 25,
      high: 35,
      extreme: 50
    };
    const steps = qualityMap[options?.quality || 'medium'];

    // プロンプトの強化
    let enhancedPrompt = prompt;
    
    // 画像タイプに応じたプロンプト調整
    if (options?.imageType === 'background') {
      enhancedPrompt += ', professional background, clean composition, minimal design';
    } else if (options?.imageType === 'illustration') {
      enhancedPrompt += ', detailed illustration, clear and informative, professional quality';
    } else if (options?.imageType === 'icon') {
      enhancedPrompt += ', simple icon, clean lines, minimalist design, flat design';
    } else if (options?.imageType === 'diagram') {
      enhancedPrompt += ', technical diagram, clear infographic, professional chart';
    }

    // スタイルの適用
    if (options?.style) {
      enhancedPrompt += `, ${options.style} style`;
    }

    // 品質向上のためのプロンプト追加
    enhancedPrompt += ', high quality, detailed, professional, clean composition';

    const negativePrompt = 'low quality, blurry, distorted, text overlay, watermark, signature, logo, nsfw, inappropriate content';

    return await this.generateImage({
      prompt: enhancedPrompt,
      negativePrompt,
      width: size.width,
      height: size.height,
      steps,
      guidance_scale: 7.5,
      model: this.config.modelName
    });
  }

  /**
   * 利用可能なモデル一覧を取得
   */
  async getAvailableModels(): Promise<FoocusModelInfo[]> {
    try {
      const response = await this.makeRequest('/sdapi/v1/sd-models');
      const data = await response.json();
      
      if (Array.isArray(data)) {
        return data.map((model: any) => ({
          id: model.model_name || model.title,
          name: model.title || model.model_name,
          type: 'checkpoint',
          size: model.sha256 ? 'Unknown' : undefined
        }));
      }
      return [];
    } catch (error) {
      console.warn('Failed to get Fooocus models:', error);
      return [];
    }
  }

  /**
   * 利用可能なスタイル一覧を取得
   */
  async getAvailableStyles(): Promise<FoocusStyleInfo[]> {
    try {
      const response = await this.makeRequest('/sdapi/v1/prompt-styles');
      const data = await response.json();
      
      if (Array.isArray(data)) {
        return data.map((style: any) => ({
          name: style.name,
          description: style.prompt || style.description
        }));
      }
      return [];
    } catch (error) {
      console.warn('Failed to get Fooocus styles:', error);
      return [];
    }
  }

  /**
   * 接続テスト
   */
  async testConnection(): Promise<boolean> {
    try {
      const response = await this.makeRequest('/sdapi/v1/options');
      return response.ok;
    } catch (error) {
      console.warn('Fooocus connection test failed:', error);
      return false;
    }
  }

  /**
   * サーバー情報を取得
   */
  async getServerInfo(): Promise<{ status: string; model?: string; version?: string }> {
    try {
      const response = await this.makeRequest('/sdapi/v1/options');
      const data = await response.json();
      
      return {
        status: 'connected',
        model: data.sd_model_checkpoint || 'Unknown',
        version: data.version || 'Stable Diffusion WebUI'
      };
    } catch (error) {
      return {
        status: 'disconnected'
      };
    }
  }

  /**
   * 進行状況を取得
   */
  async getProgress(): Promise<{ progress: number; eta?: number; current_image?: string }> {
    try {
      const response = await this.makeRequest('/sdapi/v1/progress');
      const data = await response.json();
      
      return {
        progress: data.progress || 0,
        eta: data.eta_relative,
        current_image: data.current_image
      };
    } catch (error) {
      return { progress: 0 };
    }
  }

  /**
   * 共通HTTPリクエスト処理
   */
  private async makeRequest(endpoint: string, body?: any): Promise<Response> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };

    // 認証トークンが設定されている場合は追加
    if (this.config.authToken) {
      headers['Authorization'] = `Bearer ${this.config.authToken}`;
    }

    const requestOptions: RequestInit = {
      method: body ? 'POST' : 'GET',
      headers,
    };

    if (body) {
      requestOptions.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(url, requestOptions);
      
      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        try {
          const errorData = await response.json();
          if (errorData.error?.message) {
            errorMessage = errorData.error.message;
          } else if (errorData.detail) {
            errorMessage = errorData.detail;
          }
        } catch (e) {
          // JSON解析に失敗した場合はそのまま
        }
        throw new Error(errorMessage);
      }

      return response;
    } catch (error) {
      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new LocalLLMConfigError(
          'Foocusサーバーに接続できません。サーバーが起動していることを確認してください。',
          'fooocus'
        );
      }
      throw error;
    }
  }

  /**
   * 設定情報を取得
   */
  getConfig(): Readonly<FoocusConfig> {
    return { ...this.config };
  }

  /**
   * プロバイダー情報を取得
   */
  getProviderInfo() {
    return {
      name: 'Fooocus',
      version: '1.0.0',
      capabilities: ['image_generation', 'txt2img', 'style_transfer'],
      isLocal: true,
      endpoint: this.config.endpoint
    };
  }
}

/**
 * FoocusServiceのファクトリ関数
 */
export function createFoocusService(config: FoocusConfig): FoocusService {
  return new FoocusService(config);
}

/**
 * 設定からFoocusServiceを作成
 */
export function createFoocusServiceFromSettings(): FoocusService {
  // 実際の使用時は getUserSettings() から設定を取得
  // ここでは仮の設定を使用
  const config: FoocusConfig = {
    endpoint: 'http://localhost:7865',
    modelName: 'Stable Diffusion XL',
    defaultQuality: 'medium'
  };
  
  return createFoocusService(config);
}

/**
 * Foocusが利用可能かチェック
 */
export async function isFoocusAvailable(endpoint: string = 'http://localhost:7865'): Promise<boolean> {
  try {
    const service = createFoocusService({ endpoint });
    return await service.testConnection();
  } catch (error) {
    return false;
  }
}

/**
 * 推奨設定を取得
 */
export function getRecommendedFoocusConfig(): FoocusConfig {
  return {
    endpoint: 'http://localhost:7865',
    modelName: 'Stable Diffusion XL',
    defaultQuality: 'high',
    defaultStyle: 'default'
  };
}